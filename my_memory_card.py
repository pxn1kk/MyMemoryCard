from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QHBoxLayout, QButtonGroup, QVBoxLayout, QApplication, QWidget, QRadioButton, QPushButton, QLabel, QGroupBox
from random import shuffle, randint
#class, handling inf for every qstn
class Question():
    def __init__(self, question, right_answer, wrong1, wrong2, wrong3):
     self.question = question
     self.right_answer = right_answer
     self.wrong1 = wrong1
     self.wrong2 = wrong2
     self.wrong3 = wrong3

# –æ–∫–Ω–æ
app = QApplication([])
main_window = QWidget()
main_window.setWindowTitle("My Memo Card üìá (Valve Edition)")
main_window.resize(600, 300)

#counter
main_window.cur_question = - 1

# main widgets
GroupBox = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
lb_question = QLabel("placeholder")
rbtn_1 = QRadioButton("1")
rbtn_2 = QRadioButton("2")
rbtn_3 = QRadioButton("3")
rbtn_4 = QRadioButton("4")
btn_ok = QPushButton('–û—Ç–≤–µ—Ç–∏—Ç—å')

# put btn in group
RadioGroup = QButtonGroup()
RadioGroup.addButton(rbtn_1)
RadioGroup.addButton(rbtn_2)
RadioGroup.addButton(rbtn_3)
RadioGroup.addButton(rbtn_4)

# layouts
layout_ans1 = QHBoxLayout()
layout_ans2 = QVBoxLayout()
layout_ans3 = QVBoxLayout()

# setLayout for btn
layout_ans2.addWidget(rbtn_1)
layout_ans2.addWidget(rbtn_2)
layout_ans3.addWidget(rbtn_3)
layout_ans3.addWidget(rbtn_4)
layout_ans1.addLayout(layout_ans2)  # Use addLayout, not addWidget
layout_ans1.addLayout(layout_ans3)

# setLayout for GroupBox
GroupBox.setLayout(layout_ans1)

AnsGroupBox = QGroupBox('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞')
lb_result = QLabel('–ó–î–ï–°–¨ –ë–£–î–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢')  # Fixed: lb_result instead of lb_answer twice
lb_correct = QLabel('–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç') #  A separate label for correct answer

layout_res = QVBoxLayout()
layout_res.addWidget(lb_result, alignment=(Qt.AlignLeft | Qt.AlignTop))
layout_res.addWidget(lb_correct, alignment=Qt.AlignHCenter) # Added lb_correct
AnsGroupBox.setLayout(layout_res) # Crucial: set layout for AnsGroupBox

# setLayout for everything
layout_line1 = QHBoxLayout()
layout_line2 = QHBoxLayout()
layout_line3 = QHBoxLayout()

layout_line1.addWidget(lb_question, alignment=(Qt.AlignHCenter | Qt.AlignVCenter))

layout_line2.addWidget(GroupBox)
# –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É
layout_line2.addWidget(AnsGroupBox)
# hiding group w/ qstn
AnsGroupBox.hide()  # No need to hide GroupBox initially

layout_line3.addStretch(1)
layout_line3.addWidget(btn_ok, stretch=2)
layout_line3.addStretch(1)

layout_card = QVBoxLayout() # Fixed typo: layout_card, not layout.card
layout_card.addLayout(layout_line1)
layout_card.addLayout(layout_line2)
layout_card.addLayout(layout_line3)
layout_card.setSpacing(5)


main_window.setLayout(layout_card)


# ans
def show_result():
    GroupBox.hide()
    AnsGroupBox.show()
    btn_ok.setText("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")

# show em the dayum correct result 
def show_question():    
    GroupBox.show()
    AnsGroupBox.hide()
    btn_ok.setText("–û—Ç–≤–µ—Ç–∏—Ç—å")

    RadioGroup.setExclusive(False)
    rbtn_1.setChecked(False)
    rbtn_2.setChecked(False)
    rbtn_3.setChecked(False)
    rbtn_4.setChecked(False)
    RadioGroup.setExclusive(True)
#fn for choosing correct fn
def click_OK():
    if btn_ok.text() == "–û—Ç–≤–µ—Ç–∏—Ç—å":
        check_answer()
    else:
        next_question()

answer = [rbtn_1, rbtn_2, rbtn_3, rbtn_4]
def ask(q):
    shuffle(answer)
    answer[0].setText(q.right_answer)
    answer[1].setText(q.wrong1)
    answer[2].setText(q.wrong2)
    answer[3].setText(q.wrong3)

    lb_question.setText(q.question)
    lb_correct.setText(q.right_answer)

    show_question()
main_window.total = 0
main_window.score = 0
#right ans?
def check_answer():
    if answer[0].isChecked():
        lb_result.setText("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úîÔ∏è ")
        main_window.score += 1
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ", main_window.total)
        print("- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", main_window.score)
        print('- –†–µ–π—Ç–∏–Ω–≥', main_window.score / main_window.total * 100)
    else:
        lb_result.setText("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå ")
    show_result()
    
question_list = [] #q list
def next_question():
    main_window.total += 1
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ", main_window.total)
    print("- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", main_window.score)
    len_list = len(question_list) - 1
    cur_question = randint(0, len_list)
    q = question_list[  cur_question]
    ask(q)

#–≤–æ–ø—Ä–æ—Å, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ 3
q = Question('–ö–∞–∫–æ–π –∫—É–ª—å—Ç–æ–≤—ã–π —à—É—Ç–µ—Ä –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ —Å—Ç–∞–ª –¥–µ–±—é—Ç–Ω–æ–π –∏–≥—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?', "Half-Life" ,"Counter-Strike", "Team Fortress 2", "Quake")
question_list.append(q)
q = Question("–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è Valve?", "1996" ,"2002", "2010", "1980")
question_list.append(q)
q = Question('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–≥—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è Valve?', "Steam" ,"Origin", "Battle.net", "GOG.com")
question_list.append(q)
q = Question('–ö–∞–∫–∞—è –∏–≥—Ä–∞ Valve –≤–ø–µ—Ä–≤—ã–µ –≤–≤–µ–ª–∞ "–±–æ–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫" –∫–∞–∫ —á–∞—Å—Ç—å –∏–≥—Ä–æ–≤–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏?', "Dota 2" ,"Portal", "Team Fortress Classic", "Half-Life 2")
question_list.append(q)
q = Question('–ö–∞–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é, –±—ã–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ Valve?', "Index" ,"Oculus Rift", "HTC Vive", "PSVR")
question_list.append(q)

next_question()

    
btn_ok.clicked.connect(click_OK)

main_window.show()
app.exec_()